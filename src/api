from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
import os
import sys
import tempfile
import shutil
from typing import Dict, Any

# Add common directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'common'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'lesson_plan'))

from common.config import API_HOST, API_PORT, DEBUG, ALLOWED_EXTENSIONS, CLASS_CATEGORIES
from lesson_plan.ingestion_pipeline import DocumentIngestionPipeline
from lesson_plan.generation.generator import LessonPlanGenerator

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Initialize components
ingestion_pipeline = DocumentIngestionPipeline()
lesson_plan_generator = LessonPlanGenerator()

# Basic HTML template for the demo UI
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>EduPlan AI - Lesson Plan Generator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">EduPlan AI - Lesson Plan Generator</h1>
        
        <div class="row">
            <div class="col-md-6">
                <h3>Upload Document</h3>
                <form id="uploadForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="file" class="form-label">Document File</label>
                        <input type="file" class="form-control" id="file" name="file" accept=".pdf,.txt,.docx" required>
                    </div>
                    <div class="mb-3">
                        <label for="class_number" class="form-label">Class</label>
                        <select class="form-control" id="class_number" name="class_number" required>
                            {% for class_num in classes %}
                            <option value="{{ class_num }}">Class {{ class_num }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="subject" class="form-label">Subject</label>
                        <input type="text" class="form-control" id="subject" name="subject" placeholder="e.g., Math, Science" required>
                    </div>
                    <div class="mb-3">
                        <label for="topic" class="form-label">Topic</label>
                        <input type="text" class="form-control" id="topic" name="topic" placeholder="e.g., Fractions, Light" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Upload Document</button>
                </form>
            </div>
            
            <div class="col-md-6">
                <h3>Generate Lesson Plan</h3>
                <form id="generateForm">
                    <div class="mb-3">
                        <label for="query" class="form-label">Lesson Plan Query</label>
                        <textarea class="form-control" id="query" name="query" rows="3" placeholder="Describe the lesson plan you want to generate..." required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="class_filter" class="form-label">Class Filter (Optional)</label>
                        <select class="form-control" id="class_filter" name="class_filter">
                            <option value="">Any Class</option>
                            {% for class_num in classes %}
                            <option value="{{ class_num }}">Class {{ class_num }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="subject_filter" class="form-label">Subject Filter (Optional)</label>
                        <input type="text" class="form-control" id="subject_filter" name="subject_filter" placeholder="e.g., Math, Science">
                    </div>
                    <button type="submit" class="btn btn-success">Generate Lesson Plan</button>
                </form>
            </div>
        </div>
        
        <div class="row mt-5">
            <div class="col-12">
                <div id="results" class="alert alert-info" style="display: none;"></div>
            </div>
        </div>
    </div>
    
    <script>
        document.getElementById('uploadForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            try {
                const response = await fetch('/upload-document', {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();
                document.getElementById('results').style.display = 'block';
                document.getElementById('results').innerHTML = '<strong>Upload Result:</strong><br>' + JSON.stringify(result, null, 2);
            } catch (error) {
                document.getElementById('results').style.display = 'block';
                document.getElementById('results').innerHTML = '<strong>Error:</strong> ' + error.message;
            }
        });
        
        document.getElementById('generateForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            
            try {
                const response = await fetch('/generate-lesson-plan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                document.getElementById('results').style.display = 'block';
                document.getElementById('results').innerHTML = '<strong>Generated Lesson Plan:</strong><br><pre>' + result.lesson_plan + '</pre>';
            } catch (error) {
                document.getElementById('results').style.display = 'block';
                document.getElementById('results').innerHTML = '<strong>Error:</strong> ' + error.message;
            }
        });
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    """Home page with basic UI demo"""
    return render_template_string(HTML_TEMPLATE, classes=CLASS_CATEGORIES)

@app.route('/health')
def health_check():
    """API health check"""
    return jsonify({"status": "healthy", "service": "EduPlan AI"})

@app.route('/upload-document', methods=['POST'])
def upload_document():
    """Upload and process educational documents"""
    try:
        # Check if file is present
        if 'file' not in request.files:
            return jsonify({"error": "No file provided"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # Get form data
        class_number = request.form.get('class_number')
        subject = request.form.get('subject')
        topic = request.form.get('topic')
        difficulty = request.form.get('difficulty', 'basic')
        
        # Validate file extension
        file_extension = file.filename.split('.')[-1].lower()
        if file_extension not in ALLOWED_EXTENSIONS:
            return jsonify({
                "error": f"Unsupported file format. Allowed: {ALLOWED_EXTENSIONS}"
            }), 400
        
        # Validate class
        if class_number not in CLASS_CATEGORIES:
            return jsonify({
                "error": f"Invalid class. Allowed: {CLASS_CATEGORIES}"
            }), 400
        
        # Save file to temp directory
        with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as temp_file:
            file.save(temp_file.name)
            temp_file_path = temp_file.name
        
        try:
            # Process and ingest document
            doc_ids, metadata = ingestion_pipeline.ingest_file(temp_file_path)
            
            return jsonify({
                "message": "Document uploaded and processed successfully",
                "document_ids": doc_ids,
                "chunks": len(doc_ids),
                "metadata": {
                    "filename": file.filename,
                    "class": class_number,
                    "subject": subject,
                    "topic": topic,
                    "difficulty": difficulty
                }
            })
        finally:
            # Clean up temp file
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
                
    except Exception as e:
        return jsonify({"error": f"Error processing document: {str(e)}"}), 500

@app.route('/generate-lesson-plan', methods=['POST'])
def generate_lesson_plan():
    """Generate a lesson plan based on query and filters"""
    try:
        data = request.get_json()
        
        # Validate required fields
        if not data or 'query' not in data:
            return jsonify({"error": "Query is required"}), 400
        
        query = data['query']
        class_filter = data.get('class_filter') or None
        subject_filter = data.get('subject_filter') or None
        num_context_docs = data.get('num_context_docs', 5)
        
        # Generate lesson plan
        response = lesson_plan_generator.generate_lesson_plan(
            query=query,
            class_filter=class_filter,
            subject_filter=subject_filter,
            num_context_docs=num_context_docs
        )
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({"error": f"Error generating lesson plan: {str(e)}"}), 500

@app.route('/classes')
def get_classes():
    """Get available class categories"""
    return jsonify({"classes": CLASS_CATEGORIES})

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    print("Starting EduPlan AI - Lesson Plan Generator")
    print(f"Access the application at: http://{API_HOST}:{API_PORT}")
    app.run(host=API_HOST, port=API_PORT, debug=DEBUG)
